import pandas as pd
import trackpy as tp
import copy


def add_frame_count(dfs:list[pd.DataFrame]) -> list[pd.DataFrame]:
    """Function for adding a 'frame' column to a list of pandas DataFrames
    generated from trackpy.locate(). The value of a DataFrame's `frame` column
    is that DataFrame's index in the list. This is possible because
    crop_utils.track_screenshots() appends these DataFrames chronologically
    as screenshots are taken.

    ____________________

    PARAMETERS:
    dfs: A list of pd.DataFrames generated each frame by trackpy.locate()
    
    ____________________

    RETURNS:

    An list of modified pd.DataFrames"""

    frames = copy.deepcopy(dfs)
    for idx, df in enumerate(frames):
        df['frame'] = idx

    return frames

def reduce_df_list(frames:list[pd.DataFrame]) -> pd.DataFrame:
    """Reduces a list of DataFrames generated from trackpy.locate(), modified by
    add_frame_count(). The reduced, single DataFrame is simply a concatenation
    of all the DataFrames in the provided list.

    ____________________

    PARAMETERS:
    frames: A list of pd.DataFrames generated each frame by trackpy.locate(),
    modified by add_frame_count()
    
    ____________________

    RETURNS:

    A single, reduced pd.DataFrame"""

    recording = pd.DataFrame()
    for df in frames:
        recording = pd.concat([recording, df])

    return recording

def save_locate_csv(
    dfs:list[pd.DataFrame],
    csv_name: str,
    search_range: int,
    memory:int
):
    """Takes a list of DataFrames generated by trackpy.locate, modifies them to 
    add frame information, and reduces the list into a single, large DataFrame.
    This DataFrame is used in trackpy.link_df() to label specific particles
    and their positions. This labelled DataFrame is then saved to CSV in the
    outputs directory.

    ____________________

    PARAMETERS:
    dfs: A list of pd.DataFrames generated each frame by trackpy.locate()

    csv_name: Name of the outputted CSV

    search_range: trackpy.link_df() argument. Pixel distance allowed for a particle
    to move between each frame.

    memory: trackpy.link_df() argument. Number of frames a particle is allowed to
    not be seen before it is forgotten.
    
    ____________________

    RETURNS:

    Nothing"""

    if dfs != None:
        frames = add_frame_count(dfs)
        recording = reduce_df_list(frames)
        linked_frames = tp.link_df(recording, search_range, memory=memory)
        linked_frames.to_csv(csv_name, index=False)
        print(f"File {csv_name} successfully saved to {csv_name}")
    else:
        print("[ ERROR ] DataFrame list is empty.")