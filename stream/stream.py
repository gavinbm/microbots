import matplotlib.pyplot as plt
from matplotlib.widgets import RectangleSelector
import numpy as np
import cv2
import pyautogui
import pims
import trackpy as tp
from utils.tp_plots import *  # module of modified trackpy plotting functions
from utils.vector_utils import *

# coordinates for pyautogui.screenshot()
LEFT, TOP, WIDTH, HEIGHT = None, None, None, None

screenshot = pyautogui.screenshot()  # get initial screenshot of screen

# plot screenshot on the background of a plot
fig, ax = plt.subplots()
ax.imshow(screenshot)


def crop_select_callback(eclick, erelease):
    """Callback function for RectangleSelector; allows you to select a section
    of an initial screenshot and updates screen coordinates to be used by
    pyautogui.screenshot()"""

    global LEFT, TOP, WIDTH, HEIGHT

    x1, y1 = eclick.xdata, eclick.ydata
    x2, y2 = erelease.xdata, erelease.ydata

    LEFT = min(x1, x2)
    TOP = min(y1, y2)
    WIDTH = np.abs(x1 - x2)
    HEIGHT = np.abs(y1 - y2)


# initialize RectangleSelector
rs = RectangleSelector(
    ax,
    crop_select_callback,
    drawtype="box",
    useblit=False,
    button=[1],
    minspanx=5,
    minspany=5,
    spancoords="pixels",
    interactive=True,
)

plt.show()  # show plot w/ image and rs

while True:
    img = pyautogui.screenshot(region=(LEFT, TOP, WIDTH, HEIGHT))
    frame = np.array(img)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    pim_gray = pims.frame.Frame(gray)  # turn grayscale into PIMS Frame object

    # get feature location DataFrame
    f = tp.locate(pim_gray, 13, minmass=1000, invert=True)

    # Get plt figure generated by trackpy's annotate
    fig = annotate(f, pim_gray).figure

    # remove margins and axes from figure to only get annotated figure image
    ax = fig.gca()
    ax.axis("off")
    fig.tight_layout(pad=0)
    ax.margins(0)

    # Draw image onto plt canvas and convert into a numpy ndarray
    fig.canvas.draw()
    image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    image_from_plot = image_from_plot.reshape(
        fig.canvas.get_width_height()[::-1] + (3,)
    )

    cv2.imshow("image", image_from_plot)  # show annotated image
    fig.clear(True)  # clear canvas for next preprocessed image

    # press q to quit program
    if cv2.waitKey(1) == ord("q"):
        break
