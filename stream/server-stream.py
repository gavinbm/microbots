import socket
import sys
import cv2
import pickle
import numpy as np
import trackpy as tp
import pims
import struct ## new
import zlib
from tp_plots import *

HOST = 'localhost'
PORT = 21478

sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM) # Change to UDP 
print('Socket created')
sock.bind(('',PORT))
print('Socket bind complete')

data = b""
payload_size = struct.calcsize(">L")
while True:
    i = np.arange(28*28).reshape(28, 28)
    data, addr = sock.recvfrom(4096) # buffer size is 1024 bytes
    
    y = np.frombuffer(data, dtype=i.dtype)
    print(y)
    # frame=pickle.loads(data, fix_imports=True, encoding="bytes")
    # frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
    # gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)    # convert frame to grayscale
    # pim_gray = pims.frame.Frame(gray)   # turn grayscale into PIMS Frame object
    
    # print(frame)
    # ###############
    # f = tp.locate(pim_gray, 13, invert=True)    # get feature location DataFrame
    # fig = annotate(f, pim_gray).figure  # Get plt figure generated by trackpy's annotate

    # # remove margins and axes from figure to only get annotated figure image
    # ax = fig.gca()
    # ax.axis('off')
    # fig.tight_layout(pad=0)
    # ax.margins(0)
    # fig.canvas.draw()
    # image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    # image_from_plot = image_from_plot.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    # ###################

    # cv2.imshow('frame', image_from_plot) # show annotated image

    # fig.clear(True) # clear canvas for next preprocessed image

    if cv2.waitKey(1) == ord('q'):
        break
    
